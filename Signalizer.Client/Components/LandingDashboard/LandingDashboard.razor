@using Microsoft.AspNetCore.SignalR.Client
@using Signalizer.Entities.Dtos
@inject IConfiguration Configuration
@implements IAsyncDisposable
@inject IHttpClientFactory ClientFactory


<MudContainer Class="d-flex flex-column">
    <MudPaper Class="d-flex justify-space-between">

        <MudText Typo="Typo.h4" Class="ma-4">Market</MudText>
        <MudIconButton OnClick="OnExpandCollapseClick" Icon="@(_expanded ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)" Color="Color.Inherit" />
    </MudPaper>
    <MudCollapse Expanded="_expanded">
        <MudPaper Class="d-flex justify-space-between gap-4 mb-4">
            <MudTable Items="topVolumeCoins" Dense=@true RowClass="cursor-pointer">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Top Volume Coins</MudText>
                </ToolBarContent>
                <RowTemplate>
                    <MudTd DataLabel="Symbol">@GetBaseAsset(@context.Symbol)</MudTd>
                    <MudTd DataLabel="LastPrice">$@context.LastPrice.ToString("0.000")</MudTd>
                    <MudTd DataLabel="PriceChangePercent"> <MudText Color="@GetPriceColor(@context.PriceChangePercent)">@context.PriceChangePercent.ToString("0.00")%</MudText> </MudTd>
                </RowTemplate>
            </MudTable>
            <MudTable Items="topGainerCoins" Dense=true>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Top Gainer Coins</MudText>
                </ToolBarContent>
                <RowTemplate>
                    <MudTd DataLabel="Symbol">@GetBaseAsset(@context.Symbol)</MudTd>
                    <MudTd DataLabel="LastPrice">$@context.LastPrice.ToString("0.000")</MudTd>
                    <MudTd DataLabel="PriceChangePercent"> <MudText Color="@GetPriceColor(@context.PriceChangePercent)">@context.PriceChangePercent.ToString("0.00")%</MudText> </MudTd>
                </RowTemplate>
            </MudTable>
            <MudTable Items="topLoserCoins" Dense=true>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Top Loser Coins</MudText>
                </ToolBarContent>
                <RowTemplate>
                    <MudTd DataLabel="Symbol">@GetBaseAsset(@context.Symbol)</MudTd>
                    <MudTd DataLabel="LastPrice">$@context.LastPrice.ToString("0.000")</MudTd>
                    <MudTd DataLabel="PriceChangePercent"> <MudText Color="@GetPriceColor(@context.PriceChangePercent)">@context.PriceChangePercent.ToString("0.00")%</MudText> </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudCollapse>
    <MudPaper>
        @if (!IsConnected)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
                @if (prices.Count == 0)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <MudGrid Gutter="2">
                        @foreach (var price in prices)
                        {
                            <MudItem xs="12" sm="6" md="4" lg="3">
                                <MudCard Elevation="3">
                                    <MudCardContent Style="position:relative" Class="d-flex justify-content-between align-items-center gap-4">

                                        <MudIconButton Style="position:absolute; top: -10px; right: 0; width:16px; height:16px"
                                                       Size="Size.Small" Icon="@Icons.Material.Filled.Close" Color="Color.Inherit"
                                                       OnClick="@(() => Unsubscribe(@price.Value.Symbol))" Variant="Variant.Outlined" />

                                        <!-- Left: Symbol (Base) -->
                                        <MudElement Class="mt-2 overflow-auto">
                                            <MudText Typo="Typo.h6">
                                                @price.Value.TradingPair.Base
                                            </MudText>
                                        </MudElement>

                                        <!-- Right: Price Details -->
                                        <MudElement Class="d-flex flex-column align-items-end flex-grow-1">

                                            <!-- Price Change -->
                                            <MudText Typo="Typo.body2" Class="d-flex justify-end gap-2" Color="@GetPriceColor(price.Value.PriceChange)">
                                                <MudElement>
                                                    @(price.Value.PriceChange.ToString("0.00"))
                                                </MudElement>
                                                <MudElement>
                                                    (@(price.Value.PriceChangePercent.ToString("0.00"))%)
                                                </MudElement>
                                                <MudIcon Icon="@GetPriceIcon(price.Value.PriceChange)" Class="ms-1" />
                                            </MudText>

                                            <!-- Current Price -->
                                            <MudText Typo="Typo.body1" Class="d-flex justify-end ">
                                                @(price.Value.LastPrice.ToString("0.000") + " " + @price.Value.TradingPair.Quote)
                                            </MudText>
                                        </MudElement>
                                    </MudCardContent>

                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
            </MudContainer>

            <AuthorizeView>
                <Authorized>
                    <MudContainer MaxWidth="MaxWidth.Large" Class="d-flex flex-row align-center justify-center mud-width-full">
                        <MudTextField @bind-Value="tickerInput"
                                      Label="Enter a symbol"
                                      Variant="Variant.Outlined"
                                      Class="me-4">
                        </MudTextField>

                        <MudButton Class="ms-2"
                                   OnClick="@(() => Subscribe(tickerInput))"
                                   Disabled="@(!IsConnected)"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary">
                            @*
                        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Inherit"/> *@
                            +
                        </MudButton>
                    </MudContainer>
                </Authorized>
            </AuthorizeView>
        }
    </MudPaper>
</MudContainer>

@code {
    private HubConnection? hubConnection;
    private Dictionary<string, TradingDayTicker> prices = [];
    private string? tickerInput;

    private List<TradingDayTicker> topVolumeCoins = new List<TradingDayTicker>();
    private List<TradingDayTicker> topGainerCoins = new List<TradingDayTicker>();
    private List<TradingDayTicker> topLoserCoins = new List<TradingDayTicker>();

    private List<TradingPair> tradingPairList = new List<TradingPair>();
    bool _expanded = true;
    List<string> defaultTickers;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Configuration["BackendUrl"] + "/pricehub")
            .Build();

        hubConnection.On<TradingDayTicker>("ReceiveStockPriceUpdate", (price) =>
        {
            if (!prices.ContainsKey(price.Symbol))
            {
                prices.Add(price.Symbol, price);
            }
            else
            {
                prices[price.Symbol] = price;
            }
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<TradingDayTicker>>("ReceiveStockVolumeUpdate", (volumes) =>
        {
            topVolumeCoins = volumes;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<TradingDayTicker>>("ReceiveStockGainersUpdate", (gainers) =>
        {
            topGainerCoins = gainers;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<TradingDayTicker>>("ReceiveStockLosersUpdate", (losers) =>
        {
            topLoserCoins = losers;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();


        var client = ClientFactory.CreateClient("BackendService");
        topVolumeCoins = await client.GetFromJsonAsync("/api/QueryService/GetVolumeRankings", typeof(List<TradingDayTicker>)) as List<TradingDayTicker>;
        topGainerCoins = await client.GetFromJsonAsync("/api/QueryService/GetGainersRankings", typeof(List<TradingDayTicker>)) as List<TradingDayTicker>;
        topLoserCoins = await client.GetFromJsonAsync("/api/QueryService/GetLosersRankings", typeof(List<TradingDayTicker>)) as List<TradingDayTicker>;
        tradingPairList = await client.GetFromJsonAsync("/api/QueryService/GetTradingPairs", typeof(List<TradingPair>)) as List<TradingPair>;
        defaultTickers = await client.GetFromJsonAsync("/api/QueryService/GetPredefinedStrategiesSymbols", typeof(List<string>)) as List<string>;

        foreach (var ticker in defaultTickers)
        {
            await Subscribe(ticker);
        }
    }

    private async Task Subscribe(string? ticker)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Subscribe", ticker);
        }
    }

    private MudBlazor.Color GetPriceColor(decimal change)
    {
        return change > 0 ? MudBlazor.Color.Success :
               change < 0 ? MudBlazor.Color.Error :
               MudBlazor.Color.Default;
    }

    private string GetPriceIcon(decimal change)
    {
        return change > 0 ? Icons.Material.Filled.ArrowUpward :
               change < 0 ? Icons.Material.Filled.ArrowDownward :
               Icons.Material.Filled.Remove;
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public string GetBaseAsset(string symbol)
    {
        var ret = tradingPairList.Where(x => x.Base + x.Quote == symbol).Select(x => x.Base + "/" + x.Quote).FirstOrDefault();
        return ret;
    }

    private async void Unsubscribe(string? ticker)
    {
        if (hubConnection is not null)
        {
            prices.Remove(ticker);
            defaultTickers.Remove(ticker);
            await hubConnection.SendAsync("Unsubscribe", ticker);
            StateHasChanged();
        }
    }
}